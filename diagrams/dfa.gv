digraph DFA {
    rankdir = LR
    overlap = false

    edge [
        fontname = "Verdana"
    ]

    node [
        shape = doublecircle,
        fontname = "Verdana",
        margin = 0
    ] S0, lt, le, gt, ge, ne, eq, sc, lp, rp,
      lk, rk, lb, rb, a, td, id, d, dd,
      if, else, import, while, type, object, package

    node [
        shape = circle,
        fontname = "Verdana",
        margin = 0
    ]

    // Relational operators
    // lt: less than
    S0 -> S1 [ label = "<" ]
    S1 -> lt [ label = "[^=]" ]
    lt -> S0 [ label = "." ]

    // le: less than or equal to
    S1 -> le [ label = "=" ]
    le -> S0 [ label = "." ]

    // gt: greater than
    S0 -> S2 [ label = ">" ]
    S2 -> gt [ label = "[^=]" ]
    gt -> S0 [ label = "." ]

    // ge: greater than ot equal to
    S2 -> ge [ label = "=" ]
    ge -> S0 [ label = "." ]

    // Equal and Not equal operators
    // eq: equal
    S0 -> eq [ label = "=" ]
    eq -> S0 [ label = "." ]

    // ne: not equal
    S0 -> not [ label = "!" ]
    not -> ne [ label = "=" ]
    ne -> S0 [ label = "." ]

    // Delimiters
    // sc: semicolon
    S0 -> sc [ label = ";" ]
    sc -> S0 [ label = "." ]

    // lp: left parenthese
    S0 -> lp [ label = "\\(" ]
    lp -> S0 [ label = "." ]

    // rp: right parenthese
    S0 -> rp [ label = "\\)" ]
    rp -> S0 [ label = "." ]

    // lk: left bracket
    S0 -> lk [ label = "\\[" ]
    lk -> S0 [ label = "." ]

    // rk: right bracket
    S0 -> rk [ label = "\\]" ]
    rk -> S0 [ label = "." ]

    // lb: left brace
    S0 -> lb [ label = "\\{" ]
    lb -> S0 [ label = "." ]

    // rb: right brace
    S0 -> rb [ label = "\\}" ]
    rb -> S0 [ label = "." ]

    // Two dots / Assign
    // a: assign
    // td: two dot vertical
    S0 -> S3 [ label = ":" ]
    S3 -> a [ label = "=" ]
    a -> S0 [ label = "." ]
    S3 -> td [ label = "[^=]" ]
    td -> S0 [ label = "." ]

    // keyword: if
    S0 -> S4 [ label = "i" ]
    S4 -> if [ label = "f" ]
    S4 -> id [ label = "[^fm]" ]

    // Integer or real numbers and dot dot
    S0 -> d [ label = "\\." ]
    d -> dd [ label = "\\." ]

    // keyword: else
    S0 -> S5 [ label = "e" ]
    S5 -> S6 [ label = "l" ]
    S5 -> id [ label = "[^l]" ]
    S6 -> S7 [ label = "s" ]
    S6 -> id [ label = "[^s]" ]
    S7 -> else [ label = "e" ]
    S7 -> id [ label = "[^e]" ]

    // keyword: import
    S4 -> S8 [ label = "m" ]
    S8 -> S9 [ label = "p" ]
    S8 -> id [ label = "[^p]" ]
    S9 -> S10 [ label = "o" ]
    S9 -> id [ label = "[^o]" ]
    S10 -> S11 [ label = "r" ]
    S10 -> id [ label = "[^r]" ]
    S11 -> import [ label = "t" ]
    S11 -> id [ label = "[^t]" ]

    // keyword: while
    S0 -> S12 [ label = "w" ]
    S12 -> S13 [ label = "h" ]
    S12 -> id [ label = "[^h]" ]
    S13 -> S14 [ label = "i" ]
    S13 -> id [ label = "[^i]" ]
    S14 -> S15 [ label = "l" ]
    S14 -> id [ label = "[^l]" ]
    S15 -> while [ label = "e" ]
    S15 -> id [ label = "[^e]" ]

    // keyword: type
    S0 -> S16 [ label = "t" ]
    S16 -> S17 [ label = "y" ]
    S16 -> id [ label = "[^y]" ]
    S17 -> S18 [ label = "p" ]
    S17 -> id [ label = "[^p]" ]
    S18 -> type [ label = "e" ]
    S18 -> id [ label = "[^e]" ]

    // keyword: object
    S0 -> S19 [ label = "o" ]
    S19 -> S20 [ label = "b" ]
    S19 -> id [ label = "[^b]" ]
    S20 -> S21 [ label = "j" ]
    S20 -> id [ label = "[^j]" ]
    S21 -> S22 [ label = "e" ]
    S21 -> id [ label = "[^e]" ]
    S22 -> S23 [ label = "c" ]
    S22 -> id [ label = "[^c]" ]
    S23 -> object [ label = "t" ]
    S23 -> id [ label = "[^t]" ]

    // keyword: package
    S0 -> S24 [ label = "p" ]
    S24 -> S25 [ label = "a" ]
    S24 -> id [ label = "[^a]" ]
    S25 -> S26 [ label = "c" ]
    S25 -> id [ label = "[^c]" ]
    S26 -> S27 [ label = "k" ]
    S26 -> id [ label = "[^k]" ]
    S27 -> S28 [ label = "a" ]
    S27 -> id [ label = "[^a]" ]
    S28 -> S29 [ label = "g" ]
    S28 -> id [ label = "[^g]" ]
    S29 -> package [ label = "e" ]
    S29 -> id [ label = "[^e]" ]


}
